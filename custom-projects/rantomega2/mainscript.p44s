// Rantomega2 default main script: BASIC FUNCTIONALITY, no LED effects yet

removeledchains()
addledchain("WS2813.GRB:/dev/ledchain1:2:0:2:0:1") // two LEDs
lrg.configure(ledchaincover()).set("fullframe",true)

glob leftled
glob rightled

lrg.clear()

leftled = makeview({
  type: 'plain',
  x: 1,
  y: 0,
  dx: 1,
  dy: 1,
  color: '#000',
  fullframe: true
})
lrg.addview(leftled)

rightled = makeview({
  type: 'plain',
  x: 0,
  y: 0,
  dx: 1,
  dy: 1,
  color: '#000',
  fullframe: true
})
lrg.addview(rightled)

//rightled.animator('alpha').from(180).repeat(0,true).runto(255,3)
//leftled.animator('alpha').from(255).repeat(0,true).runto(180,3)


// setup motors
var substeps = 2; // 1 or 2

try {
  var mode = if(substeps==2, 1, 0)
  system(format('insmod /flash/p44-stepper.ko stepper0=0,%d,3,17,2,16 stepper1=0,%d,5,11,4,15', mode, mode))
}
catch as e {
  log(4, "insmod err = %s", e)
}

var cyclesteps = 4*substeps

// speed are 1:1 for minutes, adapted for hours
var normalspeed = 10000/substeps
var slowspeed = 20000/substeps

var min_cycles = 294.912
var min_steps_diff = 0

var min_pwr_to

function moveminutes(mins, speed)
{
  var steps = mins*min_cycles*cyclesteps+min_steps_diff // actual number of steps needed
  var effsteps = round(steps, cyclesteps) // round to full cycles
  min_steps_diff = steps-effsteps; // number of steps we've missed
  log("mins=%+f, steps=%.3f, effsteps=%d, diff=%.3f, speed=%d", mins, steps, effsteps, min_steps_diff, speed)
  writefile('/sys/class/stepper/stepper0/stepinterval', speed)
  writefile('/sys/class/stepper/stepper0/currentstep', 0)
  writefile('/sys/class/stepper/stepper0/targetstep', effsteps)
  // powerdown
  abort(min_pwr_to)
  concurrent as min_pwr_to {
    delay(abs(mins)*13*speed/normalspeed)
    writefile('/sys/class/stepper/stepper0/power', 0)
  }
}

function minutesmoving()
{
  return number(readfile('/sys/class/stepper/stepper0/moving'))
}


var hour_cycles = 122.88
var hour_steps_diff = 0

var hour_pwr_to

function movehours(hours, speed)
{
  var steps = hours*hour_cycles*cyclesteps+hour_steps_diff // actual number of steps needed including last error
  var effsteps = round(steps, cyclesteps) // round to full cycles
  hour_steps_diff = steps-effsteps; // number of steps we've missed
  log("hours=%+.1f, steps=%.3f, effsteps=%d, diff=%.3f, speed=%d", hours, steps, effsteps, hour_steps_diff, speed)
  writefile('/sys/class/stepper/stepper1/stepinterval', round(speed*min_cycles/hour_cycles))
  writefile('/sys/class/stepper/stepper1/currentstep', 0)
  writefile('/sys/class/stepper/stepper1/targetstep', effsteps)
  // powerdown
  abort(hour_pwr_to)
  concurrent as hour_pwr_to {
    delay(abs(hours)*13*speed/normalspeed)
    writefile('/sys/class/stepper/stepper1/power', 0)
  }
}

function hoursmoving()
{
  return number(readfile('/sys/class/stepper/stepper1/moving'))
}


var auto_pauseminfrom = 21:54
var auto_pausehours   = 10

var pauseminfrom = null
var pauseminto   = 1


function paused()
{
  var paused
  if (isvalid(auto_pauseminfrom)) {
    if (is_time(auto_pauseminfrom)) {
      // start auto-pause
      if (isvalid(pauseminfrom)) {
        // already paused, update start hour to now
        var minutes = int(pauseminfrom % 3600)
        pauseminfrom = hour()*3600+minutes
        if (pauseminfrom>timeofday()) pauseminfrom-=1:00
      }
      else {
        // not yet paused
        pauseminfrom = auto_pauseminfrom
      }
      pauseminto = cyclic(pauseminfrom+auto_pausehours*3600, 0, 24:00)
      log(4,"auto-paused until %s", formattime(pauseminto))
    }
  }
  if (!isvalid(pauseminfrom)) paused = false;
  else if (pauseminto>pauseminfrom) paused = after_time(pauseminfrom) && !after_time(pauseminto)
  else paused = !(after_time(pauseminto) && !after_time(pauseminfrom))
  if (paused) {
    leftled.color = '#F0F' // pink: min paused
    leftled.alpha = 255
  }
  else {
    leftled.alpha = 0
    pauseminfrom = null
  }
  return paused
}


on (every(0:01:00, 0:00:50)) {
  if (!paused()) {
    log ('every minute')
    if (!minutesmoving()) moveminutes(1, normalspeed)
  }
}

on (every(1:00:00, 0:59:50)) {
  log ('every hour')
  if (!hoursmoving()) movehours(1, normalspeed)
}



var leftbutton = device('leftbutton').button(0)

on (leftbutton) evaluating as clicks {
  log("left button click = %d", clicks)
  if (clicks==1) {
    // pause
    if (paused()) {
      pauseminto += 1:00
    }
    else {
      pauseminfrom = timeofday() // now
      pauseminto = pauseminfrom+1:00
    }
    if (paused()) {
      log(4,"paused until %s", formattime(pauseminto))
    }
  }
  else if (clicks==2) {
    // actually set hour
    if (!hoursmoving()) movehours(1, normalspeed);
  }
  else if (clicks==5) {
    if (!hoursmoving()) movehours(1, slowspeed);
  }
  else if (clicks==0) {
    // stop
    movehours(0, slowspeed)
    hour_steps_diff = 0
  }
}

var rightbutton = device('rightbutton').button(0)

on (rightbutton) evaluating as clicks {
  log("right button click = %d", clicks)
  if (clicks==1) {
    if (!minutesmoving()) moveminutes(1, normalspeed);
  }
  else if (clicks==5) {
    if (!minutesmoving()) moveminutes(1, slowspeed);
  }
  else if (clicks==0) {
    // stop
    moveminutes(0, slowspeed)
    min_steps_diff = 0
  }
}
