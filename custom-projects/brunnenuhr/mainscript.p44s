// we need the PWM for analog out
system('omega2-ctrl gpiomux set uart1 pwm01')

// Analog speed control output
global aout
// - 0..100 -> 0..10V, mostly linear from 10, 0 -> 0.5V
aout = analogio("pwmchip0.0.100000", true, 0)


// Motor logic control lines
global motor_l_r
global motor_start
global motor_set
motor_l_r = digitalio('i2c0.MCP23017@24.4', true, 0)
motor_start = digitalio('i2c0.MCP23017@24.5', true, 0)
motor_set = digitalio('i2c0.MCP23017@24.6', true, 0)

// pulse counter
// - use p44-counter kernel driver
try {
  system('insmod p44-counter counter0=1,50000,42')
}
catch as e {
  log(4, "insmod err = %s", e)
}
// - reset it
writefile('/sys/class/counter/counter0/counter', 0)

// position detectors
global reed_bus
reed_bus = digitalbus('(+/i2c0.MCP23017@24.)15,14,13', false, 0)


// MARK: - operational constants

var testing = false // if set, nothing happens automatically
var reedIntvl = 5 // seconds
var regIntvl = 15 // seconds
var countsPerSecond = 6.4491 // Hz, theoretical value from Motor table
var countsPerTurn = countsPerSecond*60*60 * 12
var minAdjustCountDiff = 100 // do normal clock speed adjusting when difference is more than that
var minCalibrationCountDiff = 1000 // do actual calibration (high speed run nearest way) when absolute difference is more than that
var calibrationSpeed = 100 // 0..100 for analog out speed control
var maxWaitCount = countsPerTurn/8 // wait max 1.5 hours instead of reverse run

// reed positions in counts
var twelveOClockOffset = countsPerTurn/12*3 // test setup: 0x100 = 3h more than 0h/12h
var reverseReedOffset = 6506 // empirically determined hysteresis
// Reed Pattern Sequence is 0b100, 0b111, 0b101, 0b110
// Lower 2 bits sequence is thus 0,3,1,2
var pos = [
  cyclic(twelveOClockOffset, 0, countsPerTurn), // 0:00/12:00, first quarter
  cyclic(2*countsPerTurn/4 + twelveOClockOffset, 0, countsPerTurn), // 6:00 - third quarter
  cyclic(3*countsPerTurn/4 + twelveOClockOffset, 0, countsPerTurn), // 9:00 fourth quarter
  cyclic(1*countsPerTurn/4 + twelveOClockOffset, 0, countsPerTurn), // 3:00 - second quarter
]
// show marker pos
foreach pos as i,p { log(4,"Marker #%d = %s", i, formattime(p/countsPerSecond)) }

// MARK: - Functions

var actualabsolute default null

function manualAbsTime(time)
{
  concurrent {
    setAbsolute(cyclic(time*countsPerSecond, 0, countsPerTurn))
  }
}


function manualCalibration(absdiff)
{
  concurrent {
    actualabsolute = null
    calibrationRun(absdiff)
  }
  log(3,"Started manual calibration with unknown absolute position in background")
}


function manualRun(speed, reverse)
{
  concurrent {
    run(speed, reverse)
  }
}



function setAbsolute(newAbsPos)
{
  log(4, "setting new absolute position from marker: count=%d (%s)", newAbsPos, formattime(newAbsPos/countsPerSecond))
  // - if we already had one before, report difference
  if (isvalid(actualabsolute)) {
    log(4, "- estimated absolute position from counting was: %d (%s, %+d)", actualabsolute, formattime(actualabsolute/countsPerSecond), actualabsolute-newAbsPos)
  }
  // set the new position
  actualabsolute = newAbsPos
  // restart regulation
  regulate(true)
}


function markerDetected(marker, reverse)
{
  log("reached reed marker=0x%x, reverse=%d", marker, reverse)
  // this gives us an absolute position
  var newAbsPos = cyclic(pos[bit(0,1,marker)] - if(reverse, reverseReedOffset, 0), 0, countsPerTurn)
  setAbsolute(newAbsPos)
}


var lastRegulation default null
var lastcount default null
var calRun = 0 // 0=not calibrating, 1=forward run, -1=reverse run


function initialCalibration()
{
  // just start running
  log(4, "Initial calibration: run forward until first marker hit", absdiff)
  calibrationRun(1)
}


function calibrationRun(absdiff)
{
  var newCalRun = if (absdiff>0, 1, -1)
  if (newCalRun!=calRun) {
    calRun = newCalRun
    if (calrun<0 && abs(absdiff)<maxWaitCount) {
      log(4, "Calibrate by AWAITING time to catch up")
      stop()
    }
    else {
      log(4, "Starting  %s calibration run", if(calRun>0, "FORWARD", "REVERSE"))
      run(calibrationSpeed, calRun<0)
    }
  }
}


function calibrationcheck(expected, actual)
{
  var absdiff = expected-actual // + if we need forward correction
  // correct for shorter way
  if (absdiff>countsPerTurn/2) absdiff-=countsPerTurn
  else if (absdiff<-countsPerTurn/2) absdiff+=countsPerTurn;
  // now check if we want to calibrate
  if (abs(absdiff)>=minCalibrationCountDiff) {
    // need calibration run
    calibrationRun(absdiff)
    log(5, "calibrating: remaining count difference %+d, realtime = %s, currentshow = %s", absdiff, formattime(expected/countsPerSecond), formattime(actual/countsPerSecond))
    return false
  }
  else {
    // difference is ok
    if (calRun!=0) {
      log(4, "Ending calibration, remaining count diff = %d", absdiff)
      restartClock(absdiff)
    }
    return true // counter might have changed
  }
}


var regulationlock = lock()
var lastsp default null


function regulate(restart)
{
  if (!regulationlock.enter(20)) {
    log(3,"regulate: regulation locked >20 secs")
    return
  }
  var actualcount = number(readfile('/sys/class/counter/counter0/counter'))
  var thisRegulation = epochtime()
  // reset?
  if (restart) {
    lastRegulation = thisRegulation
    lastcount = actualcount
  }
  // now regulate
  var period = thisRegulation-lastRegulation
  var counts = actualcount-lastcount
  if (testing) {
    log(3, "regulate: TESTING -> NOP. Counter = %d, counts=%+d, freq=%.3f", actualcount, counts, counts/period)
  }
  else {
    // difference for normal clock
    var countdiff = actualcount-expectedcount
    // handle approaching signed 32bit int overflow before the fact
    if (actualcount>2E9) {
      log(4, "preventing counter overflow")
      writefile('/sys/class/counter/counter0/counter', 0)
      expectedcount = -countdiff
    }
    // check absolute position
    // - expected absolute count derives from timeofday
    var expectedabsolute = cyclic(timeofday()*countsPerSecond, 0, countsPerTurn)
    if (isvalid(actualabsolute)) {
      // we know the mechanical position
      // - update absolute with wrap around, depending on current running direction
      var absAdv = if(lastreverse, -1, 1)*counts
      actualabsolute = cyclic(actualabsolute+absAdv, 0, countsPerTurn)
      if (calibrationcheck(expectedabsolute, actualabsolute)) {
        // calibration might have reset the counter
        actualcount = number(readfile('/sys/class/counter/counter0/counter'))
      }
    }
    if (calRun==0) {
      log("- expectedcount=%d, actualcount=%d (%+d, freq=%.3f), diff=%d",
        expectedcount, actualcount, counts, counts/period, countdiff
      )
      log("  absolute count/time expected=%d (%s), actual=%s (%s)",
        expectedabsolute, formattime(expectedabsolute/countsPerSecond),
        actualabsolute, formattime(actualabsolute/countsPerSecond)
      )
      // Normal clock mode: update expected count by time passed
      if (isvalid(lastRegulation)) {
        expectedcount += countsPerSecond*period
      }
      // normal clock mode, just adjust speed
      if (abs(countdiff)>=minAdjustCountDiff) {
        // calculate correction
        var sp
        if (countdiff>0) {
          // running too fast
          sp = -1 // stop
        }
        else {
          // running too slow
          sp = 5 // catch up, more silent than sp=0,1,2
        }
        if (sp!=lastsp) {
          lastsp = sp
          log("  adjusting speed/aout=%s", if(sp<0, "STOP", sp))
          if (sp<0) {
            stop()
          }
          else {
            run(sp)
          }
        }
      }
    }
  }
  // run done, update references
  lastRegulation = thisRegulation
  lastcount = actualcount
  regulationlock.leave()
}


// MARK: - motor control

var lastspeed default null
var lastreverse default null
var runlock = lock()

function applyStop()
{
  delay(0.1)
  motor_start.state(false)
  delay(0.1)
  motor_set.state(false)
}

function stop()
{
  lastspeed = null
  applyStop()
}


function run(speed, reverse)
{
  // to make sure
  if (!isvalid(reverse)) var reverse = false
  if (!runlock.enter(30)) {
    log(3,"runlock blocked for >30 sec")
  }
  var reversing = if(isvalid(lastreverse), reverse!=lastreverse, true)
  var newspeed = if(isvalid(lastspeed), speed!=lastspeed, true)
  // update state
  lastreverse = reverse
  lastspeed = speed
  runlock.leave()
  // from here on, we are re-entrant
  if (reversing || newspeed) {
    log(6, "initiating: speed=%d, reverse=%d", speed, reverse)
    var tr
    abort(tr)
    concurrent as tr {
      // actual change
      applyStop()
      delay(if(reversing, 6, 1)) // wait, wait long for direction change
      // update debounce time (~11hz -> 75mS .. ~90Hz -> 8mS)
      writefile('/sys/class/counter/counter0/debounce', maprange(speed, 5, 100, 75000, 8000))
      // direction
      motor_l_r.state(!(reverse==true))
      delay(if(reversing, 2, 0.1))
      // set speed
      aout.value(ifvalid(speed/2,0))
      delay(1)
      aout.value(ifvalid(speed,0))
      delay(1)
      // beide 1 -> läuft gemäss analogspannung
      motor_set.state(true)
      delay(0.1)
      motor_start.state(true)
    }
    await(tr)
    log(6, "finished applying: speed=%d, reverse=%d", speed, reverse)
  }
}


// MARK: - startup

var expectedcount default 0

function restartClock(knowndiff)
{
  log(4, "re-start normal clock operation with known counter diff = %d", knowndiff)
  stop()
  // no calibration
  calRun = 0
  // reset the pulse counter (real and expectation)
  expectedcount = knowndiff
  writefile('/sys/class/counter/counter0/counter', 0)
  // restart regulation
  regulate(true)
}


function startClock()
{
  if (!testing) {
    log(4, "start clock")
    // delay(30) // await correct NTP time
    restartclock(minAdjustCountDiff) // make sure we start
    log(3, "!!! enable autocalibration later")
    //initialCalibration()
  }
}


// MARK: - Main

// start running
startClock();

// speed regulation
on (every(regIntvl, regIntvl)) {
  regulate(false)
}

var lastreed default 0
var reedlock = lock()

// reed contact sampling
on (every(reedIntvl)) {
  if (reedlock.enter()) {
    var reedpos = reed_bus.value()
    log(6, "reed=0x%x", reedpos)
    if (reedpos!=lastreed) {
      // collect all bits, only report when all are gone
      if (reedpos>lastreed) {
        log("more reed bits = 0x%x", reedpos)
        lastreed = reedpos
      }
      else if (reedpos==0) {
        markerDetected(lastreed, lastreverse)
        lastreed = 0 // reset, so new bits need to come and go before triggering again
      }
    }
    reedlock.leave()
  }
}
