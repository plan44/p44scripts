// we need the PWM for analog out
system('omega2-ctrl gpiomux set uart1 pwm01')

// Analog speed control output
global aout
// - 0..100 -> 0..10V, mostly linear from 10, 0 -> 0.5V
aout = analogio("pwmchip0.0.100000", true, 0)


// Motor logic control lines
global motor_l_r
global motor_start
global motor_set
motor_l_r = digitalio('i2c0.MCP23017@24.4', true, 0)
motor_start = digitalio('i2c0.MCP23017@24.5', true, 0)
motor_set = digitalio('i2c0.MCP23017@24.6', true, 0)

// pulse counter
// - use p44-counter kernel driver
try {
  system('insmod p44-counter counter0=1,50000,42')
}
catch as e {
  log(4, "insmod err = %s", e)
}
// - reset it
writefile('/sys/class/counter/counter0/counter', 0)

// position detectors
global reed_bus
reed_bus = digitalbus('(+/i2c0.MCP23017@24.)15,14,13', false, 0)


// MARK: - operational constants

var testing = false // if set, nothing happens automatically
var regIntvl = 10 // seconds
var countsPerSecond = 6.4491 // Hz, theoretical value from Motor table
var countsPerTurn = countsPerSecond*60*60 * 12
var adjustCountDiff = 100 // do normal clock speed adjusting when difference is more than that
var clockSpeed = 5 // normal running speed for clock
var startCalibrationCountDiff = 1000 // start actual calibration (high speed run nearest way) when absolute difference is more than that
var stopCalibrationCountDiff = 200 // stop calibration run when difference falls below this
var calibrationSpeed = 100 // 0..100, speed used for calibration, will be programmed into motor
var maxRegSpeed = 30 // max speed that will be applied directly. Everything above uses programmed speed
var maxWaitCount = countsPerTurn/8 // wait max 1.5 hours instead of reverse run

// reed positions in counts
var twelveOClockOffset = countsPerTurn/12*3 // test setup: 0x100 = 3h more than 0h/12h
var reverseReedOffset = 6506 // empirically determined hysteresis
// Reed Pattern Sequence is 0b100, 0b111, 0b101, 0b110
// Lower 2 bits sequence is thus 0,3,1,2
var pos = [
  cyclic(twelveOClockOffset, 0, countsPerTurn), // 0:00/12:00, first quarter
  cyclic(2*countsPerTurn/4 + twelveOClockOffset, 0, countsPerTurn), // 6:00 - third quarter
  cyclic(3*countsPerTurn/4 + twelveOClockOffset, 0, countsPerTurn), // 9:00 fourth quarter
  cyclic(1*countsPerTurn/4 + twelveOClockOffset, 0, countsPerTurn), // 3:00 - second quarter
]
// show marker pos
foreach pos as i,p { log(4,"Marker #%d = %s", i, formattime(p/countsPerSecond)) }

// MARK: - Internal Functions

var positionknown default false // if true, we (approximately) know the position


function getCounter()
{
  return number(readfile('/sys/class/counter/counter0/counter'))
}


function setCounter(newCount)
{
  calibrationRun(0)
  writefile('/sys/class/counter/counter0/counter', string(cyclic(newCount, 0, countsPerTurn)))
  lastcount = newCount
}


// @return absolute count that would be correct for current time
function expectedCount()
{
  return cyclic(timeofday()*countsPerSecond, 0, countsPerTurn)
}


function setAbsolute(newAbsPos)
{
  log(4, "setting absolute count=%d (%s)", newAbsPos, formattime(newAbsPos/countsPerSecond))
  // - if we already had one before, report difference
  if (isvalid(positionknown)) {
    var countnow = getCounter()
    log(4, "- previously known absolute count was: %d (%s, %+d)", countnow, formattime(countnow/countsPerSecond), countnow-newAbsPos)
  }
  // - set counter to the new position
  setCounter(newAbsPos)
  positionknown = true
}


function markerDetected(marker, reverse)
{
  log("reached reed marker=0x%x, reverse=%d", marker, reverse)
  // this gives us an absolute position
  var newAbsPos = cyclic(pos[bit(0,1,marker)] - if(reverse, reverseReedOffset, 0), 0, countsPerTurn)
  setAbsolute(newAbsPos)
}


var calRun = 0 // 0=not calibrating, 1=forward run, -1=reverse run


function initialCalibration()
{
  // just start running
  log(4, "Initial calibration: forget known position, run forward until first marker hit")
  positionknown = false
  calibrationRun(1)
}


function calibrationRun(absdiff)
{
  var newCalRun = if (absdiff==0, 0, if (absdiff>0, 1, -1))
  if (newCalRun!=calRun) {
    calRun = newCalRun
    if (calrun<0 && abs(absdiff)<maxWaitCount) {
      log(4, "Calibrate by AWAITING time to catch up")
      stop()
    }
    else if (calRun!=0) {
      log(4, "Starting  %s calibration run", if(calRun>0, "FORWARD", "REVERSE"))
      run(calibrationSpeed, calRun<0)
    }
    else {
      log(4, "End of calibration run")
      stop()
    }
  }
}


var lastcount = 0
var lastreg = epochtime()

function regulate()
{
  // current state
  var expected = expectedCount()
  var actual = getCounter()
  var catchup = cyclic(expected-actual, -countsPerTurn/2, countsPerTurn/2)
  var absdiff = abs(catchup)
  var thisreg = epochtime()
  var period = thisreg-lastreg
  var counts = actual-lastcount
  // update for next
  lastcount = actual
  lastreg = thisreg
  // regulate
  if (testing) {
    log(3, "regulate: TESTING -> NOP. Counter = %d, counts=%+d, freq=%.3f", actual, counts, counts/period)
  }
  else if (positionknown) {
    if (calRun!=0) {
      // already calibrating
      if (if(calrun>0, catchup<stopCalibrationCountDiff, catchup>-stopCalibrationCountDiff)) {
        // close enough or past, stop calibration
        calibrationRun(0)
      }
    }
    else {
      // not calibrating right now
      if (absdiff>=startCalibrationCountDiff) {
        // need calibration
        calibrationRun(catchup)
      }
      else {
        // normal run, just start/stop
        if (catchup > adjustCountDiff) {
          // we're behind, start motor
          run(clockSpeed, false)
        }
        else if (catchup < -adjustCountDiff) {
          // we're too far, stop motor
          stop()
        }
      }
    }
    // known position
    log("- expected=%d (%s), counter=%d (%s), %s by %d counts (%s)",
      expected, formattime(expected/countsPerSecond),
      actual, formattime(cyclic(actual/countsPerSecond, 0, countsPerTurn)),
      if(catchup>0, "late", "early"), absdiff, formattime(absdiff/countsPerSecond)
    )
  }
  else {
    // unknown position
    log("- expected=%d (%s), POSITION UNKNOWN counter=%d",
      expected, formattime(expected/countsPerSecond), actual
    )
  }
  log("  counted %+d in %.2f S - count frequency = %.2f Hz",
    counts, period, if(period>0,counts/period,0)
  )
}


var lastreed default 0
var maxreed default 0

function checkReed()
{
  // check reed
  var reedpos = reed_bus.value()
  if (reedpos!=lastreed) {
    log(5, "reed=0x%x", reedpos)
    // collect all bits, only report when all are gone
    if (reedpos>maxreed) {
      log("more reed bits = 0x%x", reedpos)
      maxreed = reedpos
    }
    else if (reedpos==0) {
      markerDetected(maxreed, lastreverse)
      maxreed = 0 // reset, so new bits need to come and go before triggering again
    }
    lastreed = reedpos
  }
}


// MARK: - motor control

var lastspeed default -1 // stopped
var lastreverse default null
var runlock = lock()

function applyStop()
{
  // first remove start to avoid programming speed
  delay(0.1)
  motor_start.state(false)
  delay(0.1)
  motor_set.state(false)
  lastspeed = -1
}

function stop()
{
  if (!runlock.enter(30)) {
    log(3,"runlock blocked for >30 sec -> STILL STOPPING RIGHT NOW")
  }
  if (motor_start.state()) {
    log(5, "motor STOPS")
  }
  applyStop()
  runlock.leave()
}


function programHiSpeed(hispeed)
{
  if (runlock.enter(0)) {
    log(4,"programming high speed=%d", hispeed)
    applyStop()
    aout.value(hispeed)
    delay(1) // settle
    motor_set.state(true)
    motor_start.state(true)
    delay(0.1)
    motor_set.state(false) // program!
    motor_start.state(false)
    runlock.leave()
  }
}


function run(speed, reverse)
{
  // defaults
  if (!isvalid(reverse)) var reverse = false
  if (!isvalid(speed)) var speed = 5
  // must not overlap with stop
  if (!runlock.enter(30)) {
    log(3,"runlock blocked for >30 sec")
    return
  }
  var reversing = if(isvalid(lastreverse), reverse!=lastreverse, true)
  var newspeed = if(isvalid(lastspeed), speed!=lastspeed, true)
  // from here on, we are re-entrant
  if (reversing || newspeed) {
    // actual change
    applyStop()
    delay(if(reversing, 2, 0.5)) // wait long for direction change, so motor can actually stop
    // set counter direction
    writefile('/sys/class/counter/counter0/countmode', if(reverse, 0x01, 0x00))
    // update debounce time (~11hz -> 75mS .. ~90Hz -> 8mS)
    writefile('/sys/class/counter/counter0/debounce', maprange(if(speed>maxRegSpeed, calibrationSpeed, speed), 5, 100, 75000, 8000))
    // direction
    motor_l_r.state(!(reverse==true))
    delay(0.1)
    // speed
    if (speed>maxRegSpeed) {
      // set=false, start=true: use programmed speed, auto-ramping
      log(5, "motor starts %s with programmed calibration speed", if(reverse, "REVERSE", "FORWARD"))
      motor_set.state(false)
      motor_start.state(true)
    }
    else {
      // set=true, start=true: use direct speed control, no ramp
      log(5, "motor starts %s with direct control, speed = %d", if(reverse, "REVERSE", "FORWARD"), speed)
      aout.value(speed)
      delay(0.3) // settle
      motor_set.state(true)
      motor_start.state(true)
    }
  }
  // update state
  lastreverse = reverse
  lastspeed = speed
  runlock.leave()
}


// MARK: - startup

function startClock()
{
  if (!testing) {
    log(4, "start clock")
    // delay(30) // await correct NTP time
    log(3, "!!! enable autocalibration later")
    initialCalibration()
    //run(clockSpeed, false)
  }
}

// MARK: - Service Functions

// @set known position from observed time shown by the clock scale
function manuallyObservedTime(time)
{
  concurrent {
    setAbsolute(cyclic(time*countsPerSecond, 0, countsPerTurn))
  }
}


function manualCalibration(absdiff)
{
  concurrent {
    calRun = null
    calibrationRun(absdiff)
  }
  log(3,"Started manual calibration")
}


function manualRun(speed, reverse)
{
  concurrent {
    run(speed, reverse)
  }
}


// MARK: - Main

// program calibration speed as hispeed into motor
programHiSpeed(calibrationSpeed)

// reset counter
setCounter(0)

// start running
startClock();

// regulation and reed contact sampling
var handling = false

on (every(regIntvl) & !handling) {
  handling = true
  checkReed()
  regulate()
  handling = false
}
