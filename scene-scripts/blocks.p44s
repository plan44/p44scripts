// "Blocks" game - controlled by MIDI

// Note: this scene script needs FW x.7.0.39 or later

// How to use:
// - create a LED light of type "blocks" (set "Feature Config" to "blocks")
//   for this effect to appear
// - put this script into a scene of your choice
// - make sure the light has a non-zero brightness in this scene
// - call the scene, the scene script will execute and start the game

// To make the MIDI control work, the device this plays on needs to have
// a MIDI controller connected which can play MIDI notes 36..39
// for left,turn,drop,right.
// The MIDI bus interface must be instantiated in the "midi" global variable,
// usually this is done in the mainscript, see mainscript-snippets/mainscript-midi-init.txt

// Note: this is a very rough first version for testing the "blocks" view,
//   which is an extract from pixelboardd (see github).

var demo = true
var bgcol = '#000'
var interval = 0.6

view.clear()

view.bgcolor = bgcol
var zoom=2
view.content_dx=view.dx/zoom
view.content_dy=view.dy/zoom
view.zoom_x=zoom
view.zoom_y=zoom
view.brightness_mode='none'


var demoplayer

local function nextPiece()
{
  view.color=hsv(random(0,359,1))
  var launched = view.launch(random(0,6,1), round(view.content_dx/2,2), random(0,3,1), interval, false)
  if (!launched) {
    gameOver()
  }
  if (demo) {
    abort(demoplayer)
    concurrent as demoplayer {
      while (true) {
        delay(random(1,3))
        var r = random(1,10,1)
        if (r<=3) { for (var i=0; i<r; i++) { view.move(-1,0,0); delay(0.2); }}
        else if (r<=6) { for (var i=0; i<r-3; i++) { view.move(1,0,0); delay(0.2); }}
        else if (r<=9) { for (var i=0; i<r-6; i++) { view.move(0,0,1) delay(0.2); }}
        else view.drop(0.05)
      }
    }
  }
}

local function startgame()
{
  abort(demoplayer)
  view.clear()
  nextPiece()
}


local function gameOver()
{
  view.bgcolor = '#F00'
  delay(1)
  view.bgcolor = bgcol
  if (demo) {
    delay(15)
  }
  else {
    delay(0:05)
    demo = true
  }
  startgame()
}


on (view.event()) as ev {
  log(6, "blocks event = %s", ev)
  abort(demoplayer)
  view.setdown()
  while (true) {
    var r = view.completedrow()
    if (!isValid(r)) break;
    view.color = '#FFF'
    view.line(0,r,view.content_dx-1,r)
    delay(0.1)
    view.color = '#000'
    view.line(0,r,view.content_dx-1,r)
    delay(0.1)
    view.color = '#FFF'
    view.line(0,r,view.content_dx-1,r)
    delay(0.1)
    view.removerow(r)
    delay(0.2)
  }
  delay(1)
  nextPiece()
}

glob midi

if (isvalid(midi)) {
  // AKAI LPD8
  on (midi.note(null,36,true)) { view.move(-1,0,0) }
  on (midi.note(null,37,true)) { view.move(0,0,1) }
  on (midi.note(null,38,true)) { view.drop(0.03) }
  on (midi.note(null,39,true)) { view.move(1,0,0);}
  on (midi.note(null,43,true)) { demo=false; startgame() }
  on (midi.control(null,40)) stable 0.5 as c {
    interval = maprange(c.value, 0, 127, 2, 0.1)
    view.speed(interval)
  }
  on (midi.control(null,42)) stable 0.5 as c {
    var xpos = maprange(c.value, 0, 127, 0, view.content_dx-1)
    view.position(xpos,null,null)
  }
  on (midi.control(null,43)) stable 0.5 as c {
    var rot = cyclic(maprange(c.value, 0, 127, 0, 15), 0, 4)
    view.position(null,null,rot)
  }

  // SMC-Mixer
  var mv = 0
  on (midi.note(null,94,true)) {
    // play key
    demo=false
    startgame()
  }
  on (midi.note(null,93,true)) {
    // pause key
    demo=true
    startgame()
  }
  on (midi.pitchbend(1)) stable 0.5 as p {
    interval = maprange(p.value, 0, 16256, 2, 0.1)
    view.speed(interval)
  }
  on (midi.control(null,16)) stable 0.2 as c {
    // pseudo encoder left: move
    view.move(if(c.value>128, -1, 1),0,0)
  }
  on (midi.control(null,17)) as c {
    // pseudo encoder right: turn
    mv = mv + if(c.value>128, -0.2, 0.2)
    if (abs(mv)>=1) {
      view.move(0, 0, mv)
      mv = 0;
    }
  }
  on (midi.note(null,99,true)) {
    // pseudo encoder right
    view.drop(0.03)
  }

}


startgame()
